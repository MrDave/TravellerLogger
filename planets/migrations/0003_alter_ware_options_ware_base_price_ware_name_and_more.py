# Generated by Django 5.0.7 on 2024-07-13 19:33

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planets', '0002_rename_planet_id_planet_planet_coords'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='ware',
            options={'ordering': ['name']},
        ),
        migrations.AddField(
            model_name='ware',
            name='base_price',
            field=models.DecimalField(decimal_places=3, default=0, max_digits=8, verbose_name='base cost, kCr'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='ware',
            name='name',
            field=models.CharField(default='ware', max_length=50),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='PlanetWare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(300)], verbose_name='purchase price, %')),
                ('sell_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(400)], verbose_name='sell price, %')),
                ('planet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wares', to='planets.planet')),
                ('ware', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planets', to='planets.ware')),
            ],
        ),
        migrations.AddConstraint(
            model_name='planetware',
            constraint=models.UniqueConstraint(fields=('planet', 'ware'), name='unique_wares_for_planets'),
        ),
        migrations.AddConstraint(
            model_name='planetware',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__isnull', False), ('sell_price__isnull', False), _connector='OR'), name='purchase_or_sell_price_check', violation_error_message='At least one of the prices should be filled'),
        ),
    ]
